package kanga;
/* Generated By:JavaCC: Do not edit this line. KangaParser.java */
  public class KangaParser implements KangaParserConstants {

/*********************************
 * The Kanga Grammar Starts Here *
 *********************************/
  static final public void Goal() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(LSQPAREN);
    IntegerLiteral();
    jj_consume_token(RSQPAREN);
    jj_consume_token(LSQPAREN);
    IntegerLiteral();
    jj_consume_token(RSQPAREN);
    jj_consume_token(LSQPAREN);
    IntegerLiteral();
    jj_consume_token(RSQPAREN);
    StmtList();
    jj_consume_token(END);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Procedure();
    }
    jj_consume_token(0);
  }

  static final public void StmtList() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOOP:
      case MOVE:
      case CALL:
      case ERROR:
      case PRINT:
      case JUMP:
      case CJUMP:
      case HSTORE:
      case HLOAD:
      case ALOAD:
      case ASTORE:
      case PASSARG:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Label();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      Stmt();
    }
  }

  static final public void Procedure() throws ParseException {
    Label();
    jj_consume_token(LSQPAREN);
    IntegerLiteral();
    jj_consume_token(RSQPAREN);
    jj_consume_token(LSQPAREN);
    IntegerLiteral();
    jj_consume_token(RSQPAREN);
    jj_consume_token(LSQPAREN);
    IntegerLiteral();
    jj_consume_token(RSQPAREN);
    StmtList();
    jj_consume_token(END);
  }

  static final public void Stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOOP:
      NoOpStmt();
      break;
    case ERROR:
      ErrorStmt();
      break;
    case CJUMP:
      CJumpStmt();
      break;
    case JUMP:
      JumpStmt();
      break;
    case HSTORE:
      HStoreStmt();
      break;
    case HLOAD:
      HLoadStmt();
      break;
    case MOVE:
      MoveStmt();
      break;
    case PRINT:
      PrintStmt();
      break;
    case ALOAD:
      ALoadStmt();
      break;
    case ASTORE:
      AStoreStmt();
      break;
    case PASSARG:
      PassArgStmt();
      break;
    case CALL:
      CallStmt();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void NoOpStmt() throws ParseException {
    jj_consume_token(NOOP);
  }

  static final public void ErrorStmt() throws ParseException {
    jj_consume_token(ERROR);
  }

  static final public void CJumpStmt() throws ParseException {
    jj_consume_token(CJUMP);
    Reg();
    Label();
  }

  static final public void JumpStmt() throws ParseException {
    jj_consume_token(JUMP);
    Label();
  }

  static final public void HStoreStmt() throws ParseException {
    jj_consume_token(HSTORE);
    Reg();
    IntegerLiteral();
    Reg();
  }

  static final public void HLoadStmt() throws ParseException {
    jj_consume_token(HLOAD);
    Reg();
    Reg();
    IntegerLiteral();
  }

  static final public void MoveStmt() throws ParseException {
    jj_consume_token(MOVE);
    Reg();
    Exp();
  }

  static final public void PrintStmt() throws ParseException {
    jj_consume_token(PRINT);
    SimpleExp();
  }

  static final public void ALoadStmt() throws ParseException {
    jj_consume_token(ALOAD);
    Reg();
    SpilledArg();
  }

  static final public void AStoreStmt() throws ParseException {
    jj_consume_token(ASTORE);
    SpilledArg();
    Reg();
  }

  static final public void PassArgStmt() throws ParseException {
    jj_consume_token(PASSARG);
    IntegerLiteral();
    Reg();
  }

  static final public void CallStmt() throws ParseException {
    jj_consume_token(CALL);
    SimpleExp();
  }

  static final public void Exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HALLOCATE:
      HAllocate();
      break;
    case LT:
    case PLUS:
    case MINUS:
    case TIMES:
      BinOp();
      break;
    case v0:
    case v1:
    case a0:
    case a1:
    case a2:
    case a3:
    case t0:
    case t1:
    case t2:
    case t3:
    case t4:
    case t5:
    case t6:
    case t7:
    case s0:
    case s1:
    case s2:
    case s3:
    case s4:
    case s5:
    case s6:
    case s7:
    case t8:
    case t9:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      SimpleExp();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void HAllocate() throws ParseException {
    jj_consume_token(HALLOCATE);
    SimpleExp();
  }

  static final public void BinOp() throws ParseException {
    Operator();
    Reg();
    SimpleExp();
  }

  static final public void Operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case TIMES:
      jj_consume_token(TIMES);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void SpilledArg() throws ParseException {
    jj_consume_token(SPILLEDARG);
    IntegerLiteral();
  }

  static final public void SimpleExp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case v0:
    case v1:
    case a0:
    case a1:
    case a2:
    case a3:
    case t0:
    case t1:
    case t2:
    case t3:
    case t4:
    case t5:
    case t6:
    case t7:
    case s0:
    case s1:
    case s2:
    case s3:
    case s4:
    case s5:
    case s6:
    case s7:
    case t8:
    case t9:
      Reg();
      break;
    case INTEGER_LITERAL:
      IntegerLiteral();
      break;
    case IDENTIFIER:
      Label();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Reg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case a0:
      jj_consume_token(a0);
      break;
    case a1:
      jj_consume_token(a1);
      break;
    case a2:
      jj_consume_token(a2);
      break;
    case a3:
      jj_consume_token(a3);
      break;
    case t0:
      jj_consume_token(t0);
      break;
    case t1:
      jj_consume_token(t1);
      break;
    case t2:
      jj_consume_token(t2);
      break;
    case t3:
      jj_consume_token(t3);
      break;
    case t4:
      jj_consume_token(t4);
      break;
    case t5:
      jj_consume_token(t5);
      break;
    case t6:
      jj_consume_token(t6);
      break;
    case t7:
      jj_consume_token(t7);
      break;
    case s0:
      jj_consume_token(s0);
      break;
    case s1:
      jj_consume_token(s1);
      break;
    case s2:
      jj_consume_token(s2);
      break;
    case s3:
      jj_consume_token(s3);
      break;
    case s4:
      jj_consume_token(s4);
      break;
    case s5:
      jj_consume_token(s5);
      break;
    case s6:
      jj_consume_token(s6);
      break;
    case s7:
      jj_consume_token(s7);
      break;
    case t8:
      jj_consume_token(t8);
      break;
    case t9:
      jj_consume_token(t9);
      break;
    case v0:
      jj_consume_token(v0);
      break;
    case v1:
      jj_consume_token(v1);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IntegerLiteral() throws ParseException {
    jj_consume_token(INTEGER_LITERAL);
  }

  static final public void Label() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public KangaParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x48c10000,0x8c10000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x7f3e,0x0,0x7f3e,0xfff00000,0x0,0xfff00000,0xfff00000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x80000,0x80000,0x80000,0x0,0xc0fff,0x0,0xc0fff,0xfff,};
   }

  /** Constructor with InputStream. */
  public KangaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public KangaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KangaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public KangaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new KangaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public KangaParser(KangaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(KangaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[86];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 86; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

                            }
